// updateThemesOrder.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Ç–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –∏–º–µ–Ω

require("dotenv").config();
const mongoose = require("mongoose");

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—É —Ç–µ–º—ã (–¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ö–µ–º–µ –≤ server.js)
const themeSchema = new mongoose.Schema({
  name_en: {
    type: String,
    required: true,
    unique: true,
  },
  name_kaa: {
    type: String,
    required: true,
  },
  description: {
    type: String,
    default: "",
  },
  order: {
    type: Number,
    default: 0,
  },
  terms_count: {
    type: Number,
    default: 0,
  },
  created_at: {
    type: Date,
    default: Date.now,
  },
});

const Theme = mongoose.model("Theme", themeSchema);

async function updateThemesOrder() {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    await mongoose.connect(
      process.env.MONGODB_URI || "mongodb://localhost:27017/agro-dictionary",
      {
        useNewUrlParser: true,
        useUnifiedTopology: true,
      }
    );
    console.log("‚úÖ Connected to MongoDB");

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–º—ã
    const themes = await Theme.find().sort("name_en");
    console.log(`üìä Found ${themes.length} themes`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
    for (let i = 0; i < themes.length; i++) {
      const theme = themes[i];

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –∏–º–µ–Ω–∏ —Ç–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Topic 1" -> 1)
      const match = theme.name_en.match(/\d+/);
      let order;

      if (match) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–º–µ—Ä –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        order = parseInt(match[0]);
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞, —Å—Ç–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü (1000 + –∏–Ω–¥–µ–∫—Å)
        order = 1000 + i;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
      theme.order = order;
      await theme.save();
      console.log(`‚ú® Updated "${theme.name_en}" with order ${order}`);
    }

    console.log("\n‚úÖ All themes updated successfully!");

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫
    console.log("\nüìã Final order:");
    const sortedThemes = await Theme.find().sort({ order: 1 });
    sortedThemes.forEach((theme, index) => {
      console.log(`  ${index + 1}. ${theme.name_en} (order: ${theme.order})`);
    });
  } catch (error) {
    console.error("‚ùå Error:", error);
    process.exit(1);
  } finally {
    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç MongoDB
    await mongoose.disconnect();
    console.log("\nüëã Disconnected from MongoDB");
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
updateThemesOrder();
